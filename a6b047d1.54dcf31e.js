(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{106:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return f}));var o=t(0),a=t.n(o);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),b=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=b(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=b(t),m=o,f=u["".concat(r,".").concat(m)]||u[m]||p[m]||l;return t?a.a.createElement(f,i(i({ref:n},c),{},{components:t})):a.a.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,r=new Array(l);r[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var c=2;c<l;c++)r[c]=t[c];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return b}));var o=t(2),a=t(6),l=(t(0),t(106)),r={id:"flow",title:"Defining a flow"},i={unversionedId:"flow",id:"flow",isDocsHomePage:!0,title:"Defining a flow",description:"When using nools you define a flow which acts as a container for rules that can later be used to get",source:"@site/docs\\flow.md",permalink:"/nools-ts/docs/next/",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/flow.md",version:"next",sidebar:"docs",previous:{title:"Installation",permalink:"/nools-ts/docs/next/installation"},next:{title:"Working with facts",permalink:"/nools-ts/docs/next/facts"}},s=[{value:"Programmatically",id:"programmatically",children:[]},{value:"DSL",id:"dsl",children:[]},{value:"Flow Events",id:"flow-events",children:[]},{value:"<code>nools.compile</code>",id:"noolscompile",children:[]},{value:"Checking If A Flow Exists",id:"checking-if-a-flow-exists",children:[]}],c={rightToc:s};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"When using nools you define a ",Object(l.b)("strong",{parentName:"p"},"flow")," which acts as a container for rules that can later be used to get\na ",Object(l.b)("strong",{parentName:"p"},"session")),Object(l.b)("h2",{id:"programmatically"},"Programmatically"),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'var nools = require("nools");\n\nvar Message = function (message) {\n    this.text = message;\n};\n\nvar flow = nools.flow("Hello World", function (flow) {\n\n    //find any message that is exactly hello world\n    flow.rule("Hello", [Message, "m", "m.text =~ /^hello\\\\sworld$/"], function (facts) {\n        facts.m.text = facts.m.text + " goodbye";\n        this.modify(facts.m);\n    });\n\n    //find all messages then end in goodbye\n    flow.rule("Goodbye", [Message, "m", "m.text =~ /.*goodbye$/"], function (facts) {\n        console.log(facts.m.text);\n    });\n});\n\n')),Object(l.b)("p",null,"In the above flow definition 2 rules were defined"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Hello",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Requires a Message"),Object(l.b)("li",{parentName:"ul"},"The messages's ",Object(l.b)("inlineCode",{parentName:"li"},"text")," must match the regular expression ",Object(l.b)("inlineCode",{parentName:"li"},"/^hello\\\\sworld$/")),Object(l.b)("li",{parentName:"ul"},"When matched the message's ",Object(l.b)("inlineCode",{parentName:"li"},"text")," is modified and then we let the engine know that we modified the message."))),Object(l.b)("li",{parentName:"ul"},"Goodbye",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Requires a Message"),Object(l.b)("li",{parentName:"ul"},"The messages's ",Object(l.b)("inlineCode",{parentName:"li"},"text")," must match the regular expression ",Object(l.b)("inlineCode",{parentName:"li"},"/.*goodbye$/"),"(anything that ends in goodbye)"),Object(l.b)("li",{parentName:"ul"},"When matched the resulting message is logged.")))),Object(l.b)("h2",{id:"dsl"},"DSL"),Object(l.b)("p",null,"You may also use the ",Object(l.b)("inlineCode",{parentName:"p"},"nools")," rules language to define your rules."),Object(l.b)("p",null,"The following is the equivalent of the rules defined programmatically above."),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{}),"define Message {\n    text : '',\n    constructor : function(message){\n        this.text = message;\n    }\n}\n\n//find any message that starts with hello\nrule Hello {\n    when {\n        m : Message m.text =~ /^hello(\\s*world)?$/;\n    }\n    then {\n        modify(m, function(){this.text += \" goodbye\";});\n    }\n}\n\n//find all messages then end in goodbye\nrule Goodbye {\n    when {\n        m : Message m.text =~ /.*goodbye$/;\n    }\n    then {\n        console.log(m.text);\n    }\n}\n")),Object(l.b)("p",null,"To use the flow"),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'var flow = nools.compile(__dirname + "/helloworld.nools"),\n    Message = flow.getDefined("message");\n')),Object(l.b)("h2",{id:"flow-events"},"Flow Events"),Object(l.b)("p",null,"Each flow can have the following events emitted."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"assert (fact)")," - emitted when facts are asserted"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"retract (fact)")," - emitted when facts are retracted"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"modify (fact)")," - emitted when facts are modified"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"fire (name, rule)")," - emitted when an activation is fired.")),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{}),'session.on("assert", function(fact){\n    //fact was asserted\n});\n\nsession.on("retract", function(fact){\n    //fact was retracted\n});\n\nsession.on("modify", function(fact){\n    //fact was modifed\n});\n\nsession.on("fire", function(name, rule){\n    //a rule was fired.\n});\n')),Object(l.b)("h2",{id:"noolscompile"},Object(l.b)("inlineCode",{parentName:"h2"},"nools.compile")),Object(l.b)("p",null,"The compile method accepts the following parameters"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"source|path")," - The first argument must either be a path that ends in ",Object(l.b)("inlineCode",{parentName:"li"},".nools")," or a string which is the source of the rules that you wish to compile."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"options?"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name")," : This is the name of the flow. You can use this name to look up the flow by using ",Object(l.b)("inlineCode",{parentName:"li"},"nools.getFlow"),"."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"define")," : A hash of Classes that should be aviable to the rules that you are compiling."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope"),": A hash of items that should be available to rules as they run. (i.e. a logger)"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"cb?")," - an options function to invoke when compiling is done.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{}),'rule "person name is bob" {\n    when {\n        p : Person p.name == \'bob\';\n    }\n    then {\n        logger.info("Found person with name of bob");\n        retract(p);\n    }\n}\n')),Object(l.b)("p",null,"In the above rules file we make use of a Person class and a logger. In order for nools to properly reference the Class and logger you must specify them in your options."),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'var flow = nools.compile("personFlow.nools", {\n    define: {\n        //The person class the flow should use\n        Person: Person\n    },\n    scope: {\n        //the logger you want your flow to use.\n        logger: logger\n    }\n});\n')),Object(l.b)("p",null,"You may also compile source directly."),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'var noolsSource = "rule \'person name is bob\' {"\n    + "   when {"\n    + "     p : Person p.name == \'bob\';"\n    + "   }"\n    + "   then {"\n    + "       logger.info(\'Found person with name of bob\');"\n    + "       retract(p);"\n    + "   }"\n    + "}";\n\nvar flow = nools.compile(noolsSource, {\n    define: {\n        //The person class the flow should use\n        Person: Person\n    },\n    scope: {\n        //the logger you want your flow to use.\n        logger: logger\n    },\n    name: \'person name is bob\'\n});\n')),Object(l.b)("h2",{id:"checking-if-a-flow-exists"},"Checking If A Flow Exists"),Object(l.b)("p",null,"To check if a flow currently is registering with ",Object(l.b)("inlineCode",{parentName:"p"},"nools")," use the ",Object(l.b)("inlineCode",{parentName:"p"},"hasFlow")," function;"),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'var myFlow = nools.flow("flow");\n\nnools.hasFlow("flow"); //true\n\n')))}b.isMDXComponent=!0}}]);