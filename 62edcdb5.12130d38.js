(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{116:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),u=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},f=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,d=p["".concat(i,".").concat(f)]||p[f]||b[f]||a;return t?r.a.createElement(d,s(s({ref:n},l),{},{components:t})):r.a.createElement(d,s({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var o=t(2),r=t(6),a=(t(0),t(116)),i={id:"working-with-a-session",title:"Working with a session"},s={unversionedId:"working-with-a-session",id:"version-0.4.1/working-with-a-session",isDocsHomePage:!1,title:"Working with a session",description:"A session is an instance of the flow that contains a working memory and handles the assertion, modification, and retraction of facts from the engine.",source:"@site/versioned_docs\\version-0.4.1\\working-with-a-session.md",permalink:"/nools-ts/docs/0.4.1/working-with-a-session",editUrl:"https://github.com/nikitait/nools-ts/edit/master/doc-website/versioned_docs/version-0.4.1/working-with-a-session.md",version:"0.4.1",sidebar:"version-0.4.1/docs",previous:{title:"Agenda Groups",permalink:"/nools-ts/docs/0.4.1/agenda-groups"},next:{title:"Conflict Resolution",permalink:"/nools-ts/docs/0.4.1/conflict-resolution"}},c=[{value:"Firing the rules",id:"firing-the-rules",children:[]},{value:"Fire until halt",id:"fire-until-halt",children:[]}],l={rightToc:c};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"A session is an instance of the flow that contains a working memory and handles the assertion, modification, and retraction of facts from the engine."),Object(a.b)("p",null,"To obtain an engine session from the flow invoke the  ",Object(a.b)("inlineCode",{parentName:"p"},"getSession")," method."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"var session = flow.getSession();\n")),Object(a.b)("h2",{id:"firing-the-rules"},"Firing the rules"),Object(a.b)("p",null,"When you get a session from a ",Object(a.b)("strong",{parentName:"p"},"flow")," no rules will be fired until the ",Object(a.b)("strong",{parentName:"p"},"match")," method is called."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'var session = flow.getSession();\n//assert your different messages\nsession.assert(new Message("goodbye"));\nsession.assert(new Message("hello"));\nsession.assert(new Message("hello world"));\n\n//now fire the rules\nsession.match(function(err){\n    if(err){\n        console.error(err.stack);\n    }else{\n        console.log("done");\n    }\n})\n')),Object(a.b)("p",null,"The ",Object(a.b)("strong",{parentName:"p"},"match")," method also returns a promise that is resolved once there are no more rules to activate."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'session.match().then(\n  function(){\n      console.log("Done");\n  },\n  function(err){\n    //uh oh an error occurred\n    console.error(err.stack);\n  });\n')),Object(a.b)("h2",{id:"fire-until-halt"},"Fire until halt"),Object(a.b)("p",null,'You may also run the engine an a "reactive" mode which will continue to match until ',Object(a.b)("inlineCode",{parentName:"p"},"halt")," is invoked."),Object(a.b)("p",null,"In the following example the rules engine continues to evaluate until the counter reaches ",Object(a.b)("inlineCode",{parentName:"p"},"10000"),'. If you remove the "counted to high" rule then the engine would run indefinitely.'),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'\ndefine Counter {\n    count: 0,\n    constructor: function(count){\n        this.count = count;\n    }\n}\n\n//We reached our goal\nrule "I can count!" {\n    when {\n        $ctr: Counter $ctr.count == 10000;\n    }\n    then{\n        console.log("Look ma! I counted to " + $ctr.count);\n        halt();\n    }\n}\n\n//no counter was asserted so create one\nrule "not count" {\n    when {\n        not($ctr: Counter);\n    }\n    then{\n        console.log("Imma gonna count!");\n        assert(new Counter(1));\n    }\n}\n\n//A little status update\nrule "give them an update" {\n    when{\n        $ctr: Counter $ctr.count % 1000 == 0 {count: $count}\n    }\n    then{\n        console.log("Imma countin...");\n        modify($ctr, function(){this.count = $count + 1;});\n    }\n}\n\n//just counting away\nrule count {\n    when{\n        $ctr: Counter {count: $count}\n    }\n    then{\n        modify($ctr, function(){\n          this.count = $count + 1;\n        });\n    }\n}\n\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"flow.getSession().matchUntilHalt(function(err){\n    if(err){\n        console.log(err.stack);\n        return;\n    }\n    //halt finally invoked\n});\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"matchUntilHalt")," also returns a promise."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"flow.getSession().matchUntilHalt()\n    .then(\n        function(){\n            //all done!\n        },\n        function(err){\n            console.log(err.stack);\n        }\n    );\n")))}u.isMDXComponent=!0}}]);